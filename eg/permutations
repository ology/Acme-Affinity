#!/usr/bin/env perl
use strict;
use warnings;

use Acme::Affinity;
use Algorithm::Combinatorics qw/ variations_with_repetition /;

my $questions = [
    { 'how messy are you' => [ 'very messy', 'average', 'very organized' ] },
    { 'do you like to be the center of attention' => [ 'no', 'maybe', 'yes' ] },
];
my $importance = {
    'irrelevant'         => 0,
    'a little important' => 1,
    'somewhat important' => 10,
    'very important'     => 50,
    'mandatory'          => 250,
};

my @responses1 = get_responses( $questions->[0], $importance );
my @responses2 = get_responses( $questions->[1], $importance );

my @response_pairs;
for my $r1 ( @responses1 ) {
    for my $r2 ( @responses2 ) {
        push @response_pairs, [ $r1, $r2 ];
    }
}

my @variations = variations_with_repetition( \@response_pairs, 2 );
#warn(__PACKAGE__,' ',__LINE__," MARK: ",scalar(@variations),"\n");exit;

my %scores;

my $n = 0;

for my $v ( @variations ) {
    $n++;

    my $affinity = Acme::Affinity->new(
        questions  => $questions,
        importance => $importance,
        me         => $v->[0],
        you        => $v->[1],
    );

    print $n, '. ', $affinity->score, "\n";

    $scores{ $affinity->score }++;
}

$n = 0;

for my $score ( sort { $a <=> $b } keys %scores ) {
    print ++$n, '. ', $score, ' => ', $scores{$score}, "\n";
}

sub get_responses {
    my ( $question, $importance ) = @_;

    my @responses;

    for my $v ( values %$question ) {
        my @answers = variations_with_repetition( $v, 2 );

        for my $answer ( @answers ) {
            for my $import ( sort { $importance->{$a} <=> $importance->{$b} } keys %$importance ) {
                push @responses, [ @$answer, $import ];
            }
        }
    }

    return @responses;
}
